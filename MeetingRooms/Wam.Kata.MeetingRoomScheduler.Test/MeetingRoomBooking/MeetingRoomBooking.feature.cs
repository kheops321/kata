// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Wam.Kata.MeetingRoomScheduler.Test.MeetingRoomBooking
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BookMeetingRoomsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MeetingRoomBooking.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Book meeting rooms", "\tIn order to book meeting rooms\r\n\tAs a simple user\r\n\tI want to be able to perform" +
                    " book operations over an api", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Book meeting rooms")))
            {
                Wam.Kata.MeetingRoomScheduler.Test.MeetingRoomBooking.BookMeetingRoomsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get all rooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Book meeting rooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_room")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_get")]
        public virtual void GetAllRooms()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all rooms", new string[] {
                        "t_room",
                        "t_get"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.When("I ask for the meeting room list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("we must obtain a http OK result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.And("we must obtains 10 rooms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("all room names must be unique", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cancel meeting on unknown room")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Book meeting rooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_meeting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_delete")]
        public virtual void CancelMeetingOnUnknownRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel meeting on unknown room", new string[] {
                        "t_meeting",
                        "t_delete"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.When("I try to delete a meeting using an unknown room", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("we must obtain an http BadRequest result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cancel unknown meeting on a valid room")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Book meeting rooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_meeting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_delete")]
        public virtual void CancelUnknownMeetingOnAValidRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel unknown meeting on a valid room", new string[] {
                        "t_meeting",
                        "t_delete"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.When("I try to delete an unknown meeting on a valid room", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("we must obtain an http NotFound result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cancel known meeting on a valid room")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Book meeting rooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_meeting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_delete")]
        public virtual void CancelKnownMeetingOnAValidRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel known meeting on a valid room", new string[] {
                        "t_meeting",
                        "t_delete"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "MeetingCode"});
            table1.AddRow(new string[] {
                        "fb0267fe-aa39-496e-bd97-4db7501fbe9a"});
            table1.AddRow(new string[] {
                        "ecf98d1b-af63-409a-8b3e-d87fbdb963e9"});
#line 25
 testRunner.Given("We have the following meetings on our database", ((string)(null)), table1, "Given ");
#line 29
 testRunner.When("I try to delete the meeting fb0267fe-aa39-496e-bd97-4db7501fbe9a", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("we must obtain an http OK result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add meeting with invalid data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Book meeting rooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_meeting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_add")]
        public virtual void AddMeetingWithInvalidData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add meeting with invalid data", new string[] {
                        "t_meeting",
                        "t_add"});
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.When("I try to add a meeting with invalid data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("we must obtain a BadRequest result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add meeting on unknown room")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Book meeting rooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_meeting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_add")]
        public virtual void AddMeetingOnUnknownRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add meeting on unknown room", new string[] {
                        "t_meeting",
                        "t_add"});
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.When("I try to add a meeting on an unknown room", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 40
 testRunner.Then("we must obtain a http BadRequest result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add meeting on known room on already booked slot")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Book meeting rooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_meeting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_add")]
        public virtual void AddMeetingOnKnownRoomOnAlreadyBookedSlot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add meeting on known room on already booked slot", new string[] {
                        "t_meeting",
                        "t_add"});
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "StartHour",
                        "EndHour"});
            table2.AddRow(new string[] {
                        "0",
                        "6"});
            table2.AddRow(new string[] {
                        "10",
                        "12"});
            table2.AddRow(new string[] {
                        "14",
                        "16"});
            table2.AddRow(new string[] {
                        "18",
                        "24"});
#line 44
 testRunner.Given("We have the following bookings on room2 for today", ((string)(null)), table2, "Given ");
#line 50
 testRunner.When("I try to add a meeting on same room  and starting at 13 and ending at 15", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 51
 testRunner.Then("we must obtain an http Conflict result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 52
 testRunner.And("the result must contains 8 available slots", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "StartHour",
                        "EndHour"});
            table3.AddRow(new string[] {
                        "6",
                        "7"});
            table3.AddRow(new string[] {
                        "7",
                        "8"});
            table3.AddRow(new string[] {
                        "8",
                        "9"});
            table3.AddRow(new string[] {
                        "9",
                        "10"});
            table3.AddRow(new string[] {
                        "12",
                        "13"});
            table3.AddRow(new string[] {
                        "13",
                        "14"});
            table3.AddRow(new string[] {
                        "16",
                        "17"});
            table3.AddRow(new string[] {
                        "17",
                        "18"});
#line 53
 testRunner.And("the available slots must like following", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add meeting on known room on free slot")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Book meeting rooms")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_meeting")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("t_add")]
        public virtual void AddMeetingOnKnownRoomOnFreeSlot()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add meeting on known room on free slot", new string[] {
                        "t_meeting",
                        "t_add"});
#line 65
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "StartHour",
                        "EndHour"});
            table4.AddRow(new string[] {
                        "0",
                        "6"});
            table4.AddRow(new string[] {
                        "18",
                        "24"});
#line 66
 testRunner.Given("We have the these bookings on room2 for today", ((string)(null)), table4, "Given ");
#line 70
 testRunner.When("I try to add a meeting on the same room starting at 8 and ending at 10 on same da" +
                    "y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("we must obtain an http Created result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 72
 testRunner.And("we should obtain the code of the created meeting which must be a valid guid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
